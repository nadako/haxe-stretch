// this file is autogenerated with GenTest.hx
class TestFixtures extends utest.Test {
	function test_absolute_layout_align_items_and_justify_content_center() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(60), height : Points(40) } }, []);
		var node = new Node({ alignItems : Center, justifyContent : Center, size : { width : Points(110), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(110, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(40, node0.layout.size.height);
		Assert.equals(25, node0.layout.location.x);
		Assert.equals(30, node0.layout.location.y);
	}
	function test_absolute_layout_align_items_and_justify_content_center_and_bottom_position() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(60), height : Points(40) }, position : { start : Auto, end : Auto, top : Auto, bottom : Points(10) } }, []);
		var node = new Node({ alignItems : Center, justifyContent : Center, size : { width : Points(110), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(110, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(40, node0.layout.size.height);
		Assert.equals(25, node0.layout.location.x);
		Assert.equals(50, node0.layout.location.y);
	}
	function test_absolute_layout_align_items_and_justify_content_center_and_left_position() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(60), height : Points(40) }, position : { start : Points(5), end : Auto, top : Auto, bottom : Auto } }, []);
		var node = new Node({ alignItems : Center, justifyContent : Center, size : { width : Points(110), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(110, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(40, node0.layout.size.height);
		Assert.equals(5, node0.layout.location.x);
		Assert.equals(30, node0.layout.location.y);
	}
	function test_absolute_layout_align_items_and_justify_content_center_and_right_position() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(60), height : Points(40) }, position : { start : Auto, end : Points(5), top : Auto, bottom : Auto } }, []);
		var node = new Node({ alignItems : Center, justifyContent : Center, size : { width : Points(110), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(110, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(40, node0.layout.size.height);
		Assert.equals(45, node0.layout.location.x);
		Assert.equals(30, node0.layout.location.y);
	}
	function test_absolute_layout_align_items_and_justify_content_center_and_top_position() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(60), height : Points(40) }, position : { start : Auto, end : Auto, top : Points(10), bottom : Auto } }, []);
		var node = new Node({ alignItems : Center, justifyContent : Center, size : { width : Points(110), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(110, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(40, node0.layout.size.height);
		Assert.equals(25, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_absolute_layout_align_items_and_justify_content_flex_end() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(60), height : Points(40) } }, []);
		var node = new Node({ alignItems : FlexEnd, justifyContent : FlexEnd, size : { width : Points(110), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(110, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(40, node0.layout.size.height);
		Assert.equals(50, node0.layout.location.x);
		Assert.equals(60, node0.layout.location.y);
	}
	function test_absolute_layout_align_items_center() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(60), height : Points(40) } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(110), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(110, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(40, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(30, node0.layout.location.y);
	}
	function test_absolute_layout_align_items_center_on_child_only() {
		var node0 = new Node({ positionType : Absolute, alignSelf : Center, size : { width : Points(60), height : Points(40) } }, []);
		var node = new Node({ size : { width : Points(110), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(110, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(40, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(30, node0.layout.location.y);
	}
	function test_absolute_layout_child_order() {
		var node0 = new Node({ size : { width : Points(60), height : Points(40) } }, []);
		var node1 = new Node({ positionType : Absolute, size : { width : Points(60), height : Points(40) } }, []);
		var node2 = new Node({ size : { width : Points(60), height : Points(40) } }, []);
		var node = new Node({ alignItems : Center, justifyContent : Center, size : { width : Points(110), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(110, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(55, node0.layout.size.width);
		Assert.equals(40, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(30, node0.layout.location.y);
		Assert.equals(60, node1.layout.size.width);
		Assert.equals(40, node1.layout.size.height);
		Assert.equals(25, node1.layout.location.x);
		Assert.equals(30, node1.layout.location.y);
		Assert.equals(55, node2.layout.size.width);
		Assert.equals(40, node2.layout.size.height);
		Assert.equals(55, node2.layout.location.x);
		Assert.equals(30, node2.layout.location.y);
	}
	function test_absolute_layout_in_wrap_reverse_column_container() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(20), height : Points(20) } }, []);
		var node = new Node({ flexDirection : Column, flexWrap : WrapReverse, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(20, node0.layout.size.width);
		Assert.equals(20, node0.layout.size.height);
		Assert.equals(80, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_absolute_layout_in_wrap_reverse_column_container_flex_end() {
		var node0 = new Node({ positionType : Absolute, alignSelf : FlexEnd, size : { width : Points(20), height : Points(20) } }, []);
		var node = new Node({ flexDirection : Column, flexWrap : WrapReverse, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(20, node0.layout.size.width);
		Assert.equals(20, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_absolute_layout_in_wrap_reverse_row_container() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(20), height : Points(20) } }, []);
		var node = new Node({ flexWrap : WrapReverse, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(20, node0.layout.size.width);
		Assert.equals(20, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(80, node0.layout.location.y);
	}
	function test_absolute_layout_in_wrap_reverse_row_container_flex_end() {
		var node0 = new Node({ positionType : Absolute, alignSelf : FlexEnd, size : { width : Points(20), height : Points(20) } }, []);
		var node = new Node({ flexWrap : WrapReverse, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(20, node0.layout.size.width);
		Assert.equals(20, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_absolute_layout_justify_content_center() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(60), height : Points(40) } }, []);
		var node = new Node({ justifyContent : Center, size : { width : Points(110), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(110, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(40, node0.layout.size.height);
		Assert.equals(25, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_absolute_layout_no_size() {
		var node0 = new Node({ positionType : Absolute }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(0, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_absolute_layout_percentage_bottom_based_on_parent_height() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(10), height : Points(10) }, position : { start : Auto, end : Auto, top : Percent(0.5), bottom : Auto } }, []);
		var node1 = new Node({ positionType : Absolute, size : { width : Points(10), height : Points(10) }, position : { start : Auto, end : Auto, top : Auto, bottom : Percent(0.5) } }, []);
		var node2 = new Node({ positionType : Absolute, size : { width : Points(10), height : Auto }, position : { start : Auto, end : Auto, top : Percent(0.1), bottom : Percent(0.1) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(200) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(100, node0.layout.location.y);
		Assert.equals(10, node1.layout.size.width);
		Assert.equals(10, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(90, node1.layout.location.y);
		Assert.equals(10, node2.layout.size.width);
		Assert.equals(160, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(20, node2.layout.location.y);
	}
	function test_absolute_layout_start_top_end_bottom() {
		var node0 = new Node({ positionType : Absolute, position : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(80, node0.layout.size.width);
		Assert.equals(80, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_absolute_layout_width_height_end_bottom() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(10), height : Points(10) }, position : { start : Auto, end : Points(10), top : Auto, bottom : Points(10) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(80, node0.layout.location.x);
		Assert.equals(80, node0.layout.location.y);
	}
	function test_absolute_layout_width_height_start_top() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(10), height : Points(10) }, position : { start : Points(10), end : Auto, top : Points(10), bottom : Auto } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_absolute_layout_width_height_start_top_end_bottom() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(10), height : Points(10) }, position : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_absolute_layout_within_border() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(50), height : Points(50) }, position : { start : Points(0), end : Auto, top : Points(0), bottom : Auto } }, []);
		var node1 = new Node({ positionType : Absolute, size : { width : Points(50), height : Points(50) }, position : { start : Auto, end : Points(0), top : Auto, bottom : Points(0) } }, []);
		var node2 = new Node({ positionType : Absolute, size : { width : Points(50), height : Points(50) }, margin : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) }, position : { start : Points(0), end : Auto, top : Points(0), bottom : Auto } }, []);
		var node3 = new Node({ positionType : Absolute, size : { width : Points(50), height : Points(50) }, margin : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) }, position : { start : Auto, end : Points(0), top : Auto, bottom : Points(0) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) }, padding : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) }, border : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) } }, [node0, node1, node2, node3]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(40, node1.layout.location.x);
		Assert.equals(40, node1.layout.location.y);
		Assert.equals(50, node2.layout.size.width);
		Assert.equals(50, node2.layout.size.height);
		Assert.equals(20, node2.layout.location.x);
		Assert.equals(20, node2.layout.location.y);
		Assert.equals(50, node3.layout.size.width);
		Assert.equals(50, node3.layout.size.height);
		Assert.equals(30, node3.layout.location.x);
		Assert.equals(30, node3.layout.location.y);
	}
	function test_align_baseline() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(20) } }, []);
		var node = new Node({ alignItems : Baseline, size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(20, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(30, node1.layout.location.y);
	}
	function test_align_baseline_child_multiline() {
		var node0 = new Node({ size : { width : Points(50), height : Points(60) } }, []);
		var node10 = new Node({ size : { width : Points(25), height : Points(20) } }, []);
		var node11 = new Node({ size : { width : Points(25), height : Points(10) } }, []);
		var node12 = new Node({ size : { width : Points(25), height : Points(20) } }, []);
		var node13 = new Node({ size : { width : Points(25), height : Points(10) } }, []);
		var node1 = new Node({ flexWrap : Wrap, size : { width : Points(50), height : Auto } }, [node10, node11, node12, node13]);
		var node = new Node({ alignItems : Baseline, size : { width : Points(100), height : Auto } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(80, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(60, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(40, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(40, node1.layout.location.y);
		Assert.equals(25, node10.layout.size.width);
		Assert.equals(20, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
		Assert.equals(25, node11.layout.size.width);
		Assert.equals(10, node11.layout.size.height);
		Assert.equals(25, node11.layout.location.x);
		Assert.equals(0, node11.layout.location.y);
		Assert.equals(25, node12.layout.size.width);
		Assert.equals(20, node12.layout.size.height);
		Assert.equals(0, node12.layout.location.x);
		Assert.equals(20, node12.layout.location.y);
		Assert.equals(25, node13.layout.size.width);
		Assert.equals(10, node13.layout.size.height);
		Assert.equals(25, node13.layout.location.x);
		Assert.equals(20, node13.layout.location.y);
	}
	function test_align_baseline_nested_child() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node10 = new Node({ size : { width : Points(50), height : Points(10) } }, []);
		var node1 = new Node({ flexDirection : Column, size : { width : Points(50), height : Points(20) } }, [node10]);
		var node = new Node({ alignItems : Baseline, size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(20, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(40, node1.layout.location.y);
		Assert.equals(50, node10.layout.size.width);
		Assert.equals(10, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
	}
	function test_align_center_should_size_based_on_content() {
		var node000 = new Node({ size : { width : Points(20), height : Points(20) } }, []);
		var node00 = new Node({ flexGrow : 1, flexShrink : 1 }, [node000]);
		var node0 = new Node({ justifyContent : Center, flexGrow : 0, flexShrink : 1 }, [node00]);
		var node = new Node({ alignItems : Center, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(20, node0.layout.size.width);
		Assert.equals(20, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(40, node0.layout.location.y);
		Assert.equals(20, node00.layout.size.width);
		Assert.equals(20, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(20, node000.layout.size.width);
		Assert.equals(20, node000.layout.size.height);
		Assert.equals(0, node000.layout.location.x);
		Assert.equals(0, node000.layout.location.y);
	}
	function test_align_flex_start_with_shrinking_children() {
		var node000 = new Node({ flexGrow : 1, flexShrink : 1 }, []);
		var node00 = new Node({ flexGrow : 1, flexShrink : 1 }, [node000]);
		var node0 = new Node({ alignItems : FlexStart }, [node00]);
		var node = new Node({ size : { width : Points(500), height : Points(500) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(500, node.layout.size.width);
		Assert.equals(500, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(500, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node00.layout.size.width);
		Assert.equals(0, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(0, node000.layout.size.width);
		Assert.equals(0, node000.layout.size.height);
		Assert.equals(0, node000.layout.location.x);
		Assert.equals(0, node000.layout.location.y);
	}
	function test_align_flex_start_with_shrinking_children_with_stretch() {
		var node000 = new Node({ flexGrow : 1, flexShrink : 1 }, []);
		var node00 = new Node({ flexGrow : 1, flexShrink : 1 }, [node000]);
		var node0 = new Node({ alignItems : FlexStart }, [node00]);
		var node = new Node({ size : { width : Points(500), height : Points(500) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(500, node.layout.size.width);
		Assert.equals(500, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(500, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node00.layout.size.width);
		Assert.equals(0, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(0, node000.layout.size.width);
		Assert.equals(0, node000.layout.size.height);
		Assert.equals(0, node000.layout.location.x);
		Assert.equals(0, node000.layout.location.y);
	}
	function test_align_flex_start_with_stretching_children() {
		var node000 = new Node({ flexGrow : 1, flexShrink : 1 }, []);
		var node00 = new Node({ flexGrow : 1, flexShrink : 1 }, [node000]);
		var node0 = new Node({  }, [node00]);
		var node = new Node({ size : { width : Points(500), height : Points(500) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(500, node.layout.size.width);
		Assert.equals(500, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(500, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node00.layout.size.width);
		Assert.equals(500, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(0, node000.layout.size.width);
		Assert.equals(500, node000.layout.size.height);
		Assert.equals(0, node000.layout.location.x);
		Assert.equals(0, node000.layout.location.y);
	}
	function test_align_items_center() {
		var node0 = new Node({ size : { width : Points(10), height : Points(10) } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(45, node0.layout.location.y);
	}
	function test_align_items_center_child_without_margin_bigger_than_parent() {
		var node00 = new Node({ size : { width : Points(70), height : Points(70) } }, []);
		var node0 = new Node({ alignItems : Center }, [node00]);
		var node = new Node({ alignItems : Center, justifyContent : Center, size : { width : Points(50), height : Points(50) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(50, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(70, node0.layout.size.width);
		Assert.equals(70, node0.layout.size.height);
		Assert.equals(-10, node0.layout.location.x);
		Assert.equals(-10, node0.layout.location.y);
		Assert.equals(70, node00.layout.size.width);
		Assert.equals(70, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_align_items_center_child_with_margin_bigger_than_parent() {
		var node00 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Points(10), end : Points(10), top : Auto, bottom : Auto } }, []);
		var node0 = new Node({ alignItems : Center }, [node00]);
		var node = new Node({ alignItems : Center, justifyContent : Center, size : { width : Points(50), height : Points(50) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(50, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(70, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(-10, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node00.layout.size.width);
		Assert.equals(50, node00.layout.size.height);
		Assert.equals(10, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_align_items_center_with_child_margin() {
		var node0 = new Node({ size : { width : Points(10), height : Points(10) }, margin : { start : Auto, end : Auto, top : Points(10), bottom : Auto } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(50, node0.layout.location.y);
	}
	function test_align_items_center_with_child_top() {
		var node0 = new Node({ size : { width : Points(10), height : Points(10) }, position : { start : Auto, end : Auto, top : Points(10), bottom : Auto } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(55, node0.layout.location.y);
	}
	function test_align_items_flex_end() {
		var node0 = new Node({ size : { width : Points(10), height : Points(10) } }, []);
		var node = new Node({ alignItems : FlexEnd, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(90, node0.layout.location.y);
	}
	function test_align_items_flex_end_child_without_margin_bigger_than_parent() {
		var node00 = new Node({ size : { width : Points(70), height : Points(70) } }, []);
		var node0 = new Node({ alignItems : FlexEnd }, [node00]);
		var node = new Node({ alignItems : Center, justifyContent : Center, size : { width : Points(50), height : Points(50) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(50, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(70, node0.layout.size.width);
		Assert.equals(70, node0.layout.size.height);
		Assert.equals(-10, node0.layout.location.x);
		Assert.equals(-10, node0.layout.location.y);
		Assert.equals(70, node00.layout.size.width);
		Assert.equals(70, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_align_items_flex_end_child_with_margin_bigger_than_parent() {
		var node00 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Points(10), end : Points(10), top : Auto, bottom : Auto } }, []);
		var node0 = new Node({ alignItems : FlexEnd }, [node00]);
		var node = new Node({ alignItems : Center, justifyContent : Center, size : { width : Points(50), height : Points(50) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(50, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(70, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(-10, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node00.layout.size.width);
		Assert.equals(50, node00.layout.size.height);
		Assert.equals(10, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_align_items_flex_start() {
		var node0 = new Node({ size : { width : Points(10), height : Points(10) } }, []);
		var node = new Node({ alignItems : FlexStart, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_align_items_min_max() {
		var node0 = new Node({ size : { width : Points(60), height : Points(60) } }, []);
		var node = new Node({ flexDirection : Column, alignItems : Center, size : { width : Auto, height : Points(100) }, minSize : { width : Points(100), height : Auto }, maxSize : { width : Points(200), height : Auto } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(60, node0.layout.size.height);
		Assert.equals(20, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_align_items_stretch() {
		var node0 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_align_self_baseline() {
		var node0 = new Node({ alignSelf : Baseline, size : { width : Points(50), height : Points(50) } }, []);
		var node10 = new Node({ size : { width : Points(50), height : Points(10) } }, []);
		var node1 = new Node({ alignSelf : Baseline, size : { width : Points(50), height : Points(20) } }, [node10]);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(20, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(40, node1.layout.location.y);
		Assert.equals(50, node10.layout.size.width);
		Assert.equals(10, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
	}
	function test_align_self_center() {
		var node0 = new Node({ alignSelf : Center, size : { width : Points(10), height : Points(10) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(45, node0.layout.location.y);
	}
	function test_align_self_flex_end() {
		var node0 = new Node({ alignSelf : FlexEnd, size : { width : Points(10), height : Points(10) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(90, node0.layout.location.y);
	}
	function test_align_self_flex_end_override_flex_start() {
		var node0 = new Node({ alignSelf : FlexEnd, size : { width : Points(10), height : Points(10) } }, []);
		var node = new Node({ alignItems : FlexStart, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(90, node0.layout.location.y);
	}
	function test_align_self_flex_start() {
		var node0 = new Node({ alignSelf : FlexStart, size : { width : Points(10), height : Points(10) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_align_strech_should_size_based_on_parent() {
		var node000 = new Node({ size : { width : Points(20), height : Points(20) } }, []);
		var node00 = new Node({ flexGrow : 1, flexShrink : 1 }, [node000]);
		var node0 = new Node({ justifyContent : Center, flexGrow : 0, flexShrink : 1 }, [node00]);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(20, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(20, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(20, node000.layout.size.width);
		Assert.equals(20, node000.layout.size.height);
		Assert.equals(0, node000.layout.location.x);
		Assert.equals(0, node000.layout.location.y);
	}
	function test_border_center_child() {
		var node0 = new Node({ size : { width : Points(10), height : Points(10) } }, []);
		var node = new Node({ alignItems : Center, justifyContent : Center, size : { width : Points(100), height : Points(100) }, border : { start : Auto, end : Auto, top : Points(10), bottom : Points(20) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(45, node0.layout.location.x);
		Assert.equals(40, node0.layout.location.y);
	}
	function test_border_flex_child() {
		var node0 = new Node({ flexGrow : 1, size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) }, border : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(80, node0.layout.size.width);
		Assert.equals(80, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_border_no_child() {
		var node = new Node({ border : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) } }, []);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(20, node.layout.size.width);
		Assert.equals(20, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
	}
	function test_border_stretch_child() {
		var node0 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) }, border : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(80, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_child_min_max_width_flexing() {
		var node0 = new Node({ flexGrow : 1, flexShrink : 0, flexBasis : Points(0), minSize : { width : Points(60), height : Auto } }, []);
		var node1 = new Node({ flexGrow : 1, flexShrink : 0, flexBasis : Percent(0.5), maxSize : { width : Points(20), height : Auto } }, []);
		var node = new Node({ size : { width : Points(120), height : Points(50) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(120, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(20, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(100, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_container_with_unsized_child() {
		var node0 = new Node({  }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_display_none() {
		var node0 = new Node({ flexGrow : 1 }, []);
		var node1 = new Node({ display : None, flexGrow : 1 }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node1.layout.size.width);
		Assert.equals(0, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_display_none_fixed_size() {
		var node0 = new Node({ flexGrow : 1 }, []);
		var node1 = new Node({ display : None, size : { width : Points(20), height : Points(20) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node1.layout.size.width);
		Assert.equals(0, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_display_none_with_child() {
		var node0 = new Node({ flexGrow : 1, flexShrink : 1, flexBasis : Percent(0) }, []);
		var node10 = new Node({ flexGrow : 1, flexShrink : 1, flexBasis : Percent(0), size : { width : Points(20), height : Auto } }, []);
		var node1 = new Node({ display : None, flexDirection : Column, flexGrow : 1, flexShrink : 1, flexBasis : Percent(0) }, [node10]);
		var node2 = new Node({ flexGrow : 1, flexShrink : 1, flexBasis : Percent(0) }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node1.layout.size.width);
		Assert.equals(0, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(0, node10.layout.size.width);
		Assert.equals(0, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
		Assert.equals(50, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(50, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_display_none_with_margin() {
		var node0 = new Node({ display : None, size : { width : Points(20), height : Points(20) }, margin : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) } }, []);
		var node1 = new Node({ flexGrow : 1 }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(0, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_display_none_with_position() {
		var node0 = new Node({ flexGrow : 1 }, []);
		var node1 = new Node({ display : None, flexGrow : 1, position : { start : Auto, end : Auto, top : Points(10), bottom : Auto } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node1.layout.size.width);
		Assert.equals(0, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_flex_basis_and_main_dimen_set_when_flexing() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Points(10), size : { width : Points(50), height : Points(50) } }, []);
		var node1 = new Node({ flexGrow : 1, flexBasis : Points(10), size : { width : Points(0), height : Points(50) } }, []);
		var node = new Node({ size : { width : Points(100), height : Auto } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_flex_basis_flex_grow_column() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Points(50) }, []);
		var node1 = new Node({ flexGrow : 1 }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(75, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(25, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(75, node1.layout.location.y);
	}
	function test_flex_basis_flex_grow_row() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Points(50) }, []);
		var node1 = new Node({ flexGrow : 1 }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(75, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(25, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(75, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_flex_basis_flex_shrink_column() {
		var node0 = new Node({ flexBasis : Points(100) }, []);
		var node1 = new Node({ flexBasis : Points(50) }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(67, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(33, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(67, node1.layout.location.y);
	}
	function test_flex_basis_flex_shrink_row() {
		var node0 = new Node({ flexBasis : Points(100) }, []);
		var node1 = new Node({ flexBasis : Points(50) }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(67, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(33, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(67, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_flex_basis_larger_than_content_column() {
		var node00 = new Node({ size : { width : Points(100), height : Points(10) } }, []);
		var node0 = new Node({ flexDirection : Column, flexBasis : Points(50) }, [node00]);
		var node = new Node({ flexDirection : Column, size : { width : Auto, height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node00.layout.size.width);
		Assert.equals(10, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_flex_basis_larger_than_content_row() {
		var node00 = new Node({ size : { width : Points(10), height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexBasis : Points(50) }, [node00]);
		var node = new Node({ size : { width : Points(100), height : Auto } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(10, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_flex_basis_overrides_main_size() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Points(50), size : { width : Points(20), height : Auto } }, []);
		var node1 = new Node({ flexGrow : 1, size : { width : Points(10), height : Auto } }, []);
		var node2 = new Node({ flexGrow : 1, size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(20, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(60, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(20, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(80, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_flex_basis_slightly_smaller_then_content_with_flex_grow_large_size() {
		var node00 = new Node({ size : { width : Points(70), height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, flexBasis : Points(60) }, [node00]);
		var node10 = new Node({ size : { width : Points(20), height : Points(100) } }, []);
		var node1 = new Node({ flexDirection : Column, flexGrow : 1, flexBasis : Points(0) }, [node10]);
		var node = new Node({ size : { width : Points(100), height : Auto } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(80, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(70, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(20, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(80, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(20, node10.layout.size.width);
		Assert.equals(100, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
	}
	function test_flex_basis_smaller_than_content_column() {
		var node00 = new Node({ size : { width : Points(100), height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexBasis : Points(50) }, [node00]);
		var node = new Node({ flexDirection : Column, size : { width : Auto, height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_flex_basis_smaller_than_content_row() {
		var node00 = new Node({ size : { width : Points(100), height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexBasis : Points(50) }, [node00]);
		var node = new Node({ size : { width : Points(100), height : Auto } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_flex_basis_smaller_than_main_dimen_column() {
		var node0 = new Node({ flexBasis : Points(10), size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Auto, height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(50, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_flex_basis_smaller_than_main_dimen_row() {
		var node0 = new Node({ flexBasis : Points(10), size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ size : { width : Points(100), height : Auto } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_flex_basis_smaller_then_content_with_flex_grow_large_size() {
		var node00 = new Node({ size : { width : Points(70), height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, flexBasis : Points(0) }, [node00]);
		var node10 = new Node({ size : { width : Points(20), height : Points(100) } }, []);
		var node1 = new Node({ flexDirection : Column, flexGrow : 1, flexBasis : Points(0) }, [node10]);
		var node = new Node({ size : { width : Points(100), height : Auto } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(70, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(70, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(30, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(70, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(20, node10.layout.size.width);
		Assert.equals(100, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
	}
	function test_flex_basis_smaller_then_content_with_flex_grow_small_size() {
		var node00 = new Node({ size : { width : Points(70), height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, flexBasis : Points(0) }, [node00]);
		var node10 = new Node({ size : { width : Points(20), height : Points(100) } }, []);
		var node1 = new Node({ flexDirection : Column, flexGrow : 1, flexBasis : Points(0) }, [node10]);
		var node = new Node({ size : { width : Points(10), height : Auto } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(10, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(70, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(70, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(20, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(70, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(20, node10.layout.size.width);
		Assert.equals(100, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
	}
	function test_flex_basis_smaller_then_content_with_flex_grow_unconstraint_size() {
		var node00 = new Node({ size : { width : Points(70), height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, flexBasis : Points(0) }, [node00]);
		var node10 = new Node({ size : { width : Points(20), height : Points(100) } }, []);
		var node1 = new Node({ flexDirection : Column, flexGrow : 1, flexBasis : Points(0) }, [node10]);
		var node = new Node({  }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(90, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(70, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(70, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(20, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(70, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(20, node10.layout.size.width);
		Assert.equals(100, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
	}
	function test_flex_basis_smaller_then_content_with_flex_grow_very_large_size() {
		var node00 = new Node({ size : { width : Points(70), height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, flexBasis : Points(0) }, [node00]);
		var node10 = new Node({ size : { width : Points(20), height : Points(100) } }, []);
		var node1 = new Node({ flexDirection : Column, flexGrow : 1, flexBasis : Points(0) }, [node10]);
		var node = new Node({ size : { width : Points(200), height : Auto } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(70, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(100, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(20, node10.layout.size.width);
		Assert.equals(100, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
	}
	function test_flex_basis_unconstraint_column() {
		var node0 = new Node({ flexBasis : Points(50), size : { width : Points(100), height : Auto } }, []);
		var node = new Node({ flexDirection : Column }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_flex_basis_unconstraint_row() {
		var node0 = new Node({ flexBasis : Points(50), size : { width : Auto, height : Points(100) } }, []);
		var node = new Node({  }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(0, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_flex_direction_column() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(10, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(10, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(10, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(20, node2.layout.location.y);
	}
	function test_flex_direction_column_no_height() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Auto } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(30, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(10, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(10, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(10, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(20, node2.layout.location.y);
	}
	function test_flex_direction_column_reverse() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : ColumnReverse, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(90, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(10, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(80, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(10, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(70, node2.layout.location.y);
	}
	function test_flex_direction_row() {
		var node0 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node1 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node2 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(10, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(10, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(10, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(20, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_flex_direction_row_no_width() {
		var node0 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node1 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node2 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ size : { width : Auto, height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(30, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(10, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(10, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(10, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(20, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_flex_direction_row_reverse() {
		var node0 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node1 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node2 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ flexDirection : RowReverse, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(90, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(10, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(80, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(10, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(70, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_flex_grow_child() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Points(0), size : { width : Auto, height : Points(100) } }, []);
		var node = new Node({  }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(0, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_flex_grow_flex_basis_percent_min_max() {
		var node0 = new Node({ flexGrow : 1, flexShrink : 0, flexBasis : Points(0), size : { width : Auto, height : Points(20) }, minSize : { width : Points(60), height : Auto } }, []);
		var node1 = new Node({ flexGrow : 1, flexShrink : 0, flexBasis : Percent(0.5), size : { width : Points(20), height : Points(20) }, maxSize : { width : Points(20), height : Auto } }, []);
		var node = new Node({ size : { width : Points(120), height : Auto } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(120, node.layout.size.width);
		Assert.equals(20, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(20, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(20, node1.layout.size.width);
		Assert.equals(20, node1.layout.size.height);
		Assert.equals(100, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_flex_grow_height_maximized() {
		var node00 = new Node({ flexGrow : 1, flexBasis : Points(200) }, []);
		var node01 = new Node({ size : { width : Auto, height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, minSize : { width : Auto, height : Points(100) }, maxSize : { width : Auto, height : Points(500) } }, [node00, node01]);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(500) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(500, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(500, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node00.layout.size.width);
		Assert.equals(400, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(100, node01.layout.size.width);
		Assert.equals(100, node01.layout.size.height);
		Assert.equals(0, node01.layout.location.x);
		Assert.equals(400, node01.layout.location.y);
	}
	function test_flex_grow_in_at_most_container() {
		var node00 = new Node({ flexGrow : 1, flexBasis : Points(0) }, []);
		var node0 = new Node({  }, [node00]);
		var node = new Node({ alignItems : FlexStart, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(0, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node00.layout.size.width);
		Assert.equals(0, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_flex_grow_less_than_factor_one() {
		var node0 = new Node({ flexGrow : 0.2, flexShrink : 0, flexBasis : Points(40) }, []);
		var node1 = new Node({ flexGrow : 0.2, flexShrink : 0 }, []);
		var node2 = new Node({ flexGrow : 0.4, flexShrink : 0 }, []);
		var node = new Node({ size : { width : Points(500), height : Points(200) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(500, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(132, node0.layout.size.width);
		Assert.equals(200, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(92, node1.layout.size.width);
		Assert.equals(200, node1.layout.size.height);
		Assert.equals(132, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(184, node2.layout.size.width);
		Assert.equals(200, node2.layout.size.height);
		Assert.equals(224, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_flex_grow_root_minimized() {
		var node00 = new Node({ flexGrow : 1, flexBasis : Points(200) }, []);
		var node01 = new Node({ size : { width : Auto, height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, minSize : { width : Auto, height : Points(100) }, maxSize : { width : Auto, height : Points(500) } }, [node00, node01]);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Auto }, minSize : { width : Auto, height : Points(100) }, maxSize : { width : Auto, height : Points(500) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(300, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(300, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node00.layout.size.width);
		Assert.equals(200, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(100, node01.layout.size.width);
		Assert.equals(100, node01.layout.size.height);
		Assert.equals(0, node01.layout.location.x);
		Assert.equals(200, node01.layout.location.y);
	}
	function test_flex_grow_shrink_at_most() {
		var node00 = new Node({ flexGrow : 1, flexShrink : 1 }, []);
		var node0 = new Node({  }, [node00]);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_flex_grow_to_min() {
		var node0 = new Node({ flexGrow : 1, flexShrink : 1 }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(50) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Auto }, minSize : { width : Auto, height : Points(100) }, maxSize : { width : Auto, height : Points(500) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(50, node1.layout.location.y);
	}
	function test_flex_grow_within_constrained_max_column() {
		var node0 = new Node({ flexShrink : 1, flexBasis : Points(100) }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(50) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Auto }, maxSize : { width : Auto, height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(67, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(33, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(67, node1.layout.location.y);
	}
	function test_flex_grow_within_constrained_max_row() {
		var node00 = new Node({ flexShrink : 1, flexBasis : Points(100) }, []);
		var node01 = new Node({ size : { width : Points(50), height : Auto } }, []);
		var node0 = new Node({ size : { width : Auto, height : Points(100) }, maxSize : { width : Points(100), height : Auto } }, [node00, node01]);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Auto } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(67, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(33, node01.layout.size.width);
		Assert.equals(100, node01.layout.size.height);
		Assert.equals(67, node01.layout.location.x);
		Assert.equals(0, node01.layout.location.y);
	}
	function test_flex_grow_within_constrained_max_width() {
		var node00 = new Node({ flexGrow : 1, size : { width : Auto, height : Points(20) } }, []);
		var node0 = new Node({ maxSize : { width : Points(300), height : Auto } }, [node00]);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(200, node0.layout.size.width);
		Assert.equals(20, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(200, node00.layout.size.width);
		Assert.equals(20, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_flex_grow_within_constrained_min_column() {
		var node0 = new Node({ flexGrow : 1 }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(50) } }, []);
		var node = new Node({ flexDirection : Column, minSize : { width : Auto, height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(0, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(50, node1.layout.location.y);
	}
	function test_flex_grow_within_constrained_min_max_column() {
		var node0 = new Node({ flexGrow : 1 }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(50) } }, []);
		var node = new Node({ minSize : { width : Auto, height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(0, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_flex_grow_within_constrained_min_row() {
		var node0 = new Node({ flexGrow : 1 }, []);
		var node1 = new Node({ size : { width : Points(50), height : Auto } }, []);
		var node = new Node({ size : { width : Auto, height : Points(100) }, minSize : { width : Points(100), height : Auto } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_flex_grow_within_max_width() {
		var node00 = new Node({ flexGrow : 1, size : { width : Auto, height : Points(20) } }, []);
		var node0 = new Node({ maxSize : { width : Points(100), height : Auto } }, [node00]);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(20, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node00.layout.size.width);
		Assert.equals(20, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_flex_root_ignored() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Points(200) }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(100) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Auto }, minSize : { width : Auto, height : Points(100) }, maxSize : { width : Auto, height : Points(500) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(300, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(200, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(200, node1.layout.location.y);
	}
	function test_flex_shrink_by_outer_margin_with_max_size() {
		var node0 = new Node({ size : { width : Points(20), height : Points(20) }, margin : { start : Auto, end : Auto, top : Points(100), bottom : Auto } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Auto, height : Points(100) }, maxSize : { width : Auto, height : Points(80) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(20, node.layout.size.width);
		Assert.equals(80, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(20, node0.layout.size.width);
		Assert.equals(0, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(100, node0.layout.location.y);
	}
	function test_flex_shrink_flex_grow_child_flex_shrink_other_child() {
		var node0 = new Node({ flexGrow : 0, flexShrink : 1, size : { width : Points(500), height : Points(100) } }, []);
		var node1 = new Node({ flexGrow : 1, flexShrink : 1, size : { width : Points(500), height : Points(100) } }, []);
		var node = new Node({ size : { width : Points(500), height : Points(500) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(500, node.layout.size.width);
		Assert.equals(500, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(250, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(250, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(250, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_flex_shrink_flex_grow_row() {
		var node0 = new Node({ flexGrow : 0, flexShrink : 1, size : { width : Points(500), height : Points(100) } }, []);
		var node1 = new Node({ flexGrow : 0, flexShrink : 1, size : { width : Points(500), height : Points(100) } }, []);
		var node = new Node({ size : { width : Points(500), height : Points(500) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(500, node.layout.size.width);
		Assert.equals(500, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(250, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(250, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(250, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_flex_shrink_to_zero() {
		var node0 = new Node({ flexShrink : 0, size : { width : Points(50), height : Points(50) } }, []);
		var node1 = new Node({ flexShrink : 1, size : { width : Points(50), height : Points(50) } }, []);
		var node2 = new Node({ flexShrink : 0, size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ size : { width : Points(75), height : Auto } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(75, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(50, node2.layout.size.width);
		Assert.equals(50, node2.layout.size.height);
		Assert.equals(50, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_flex_wrap_align_stretch_fits_one_row() {
		var node0 = new Node({ size : { width : Points(50), height : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Auto } }, []);
		var node = new Node({ flexWrap : Wrap, size : { width : Points(150), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(150, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_flex_wrap_children_with_min_main_overriding_flex_basis() {
		var node0 = new Node({ flexBasis : Points(50), size : { width : Auto, height : Points(50) }, minSize : { width : Points(55), height : Auto } }, []);
		var node1 = new Node({ flexBasis : Points(50), size : { width : Auto, height : Points(50) }, minSize : { width : Points(55), height : Auto } }, []);
		var node = new Node({ flexWrap : Wrap, size : { width : Points(100), height : Auto } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(55, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(55, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(50, node1.layout.location.y);
	}
	function test_flex_wrap_wrap_to_child_height() {
		var node000 = new Node({ size : { width : Points(100), height : Points(100) } }, []);
		var node00 = new Node({ flexDirection : Column, size : { width : Points(100), height : Auto } }, [node000]);
		var node0 = new Node({ flexWrap : Wrap, alignItems : FlexStart }, [node00]);
		var node1 = new Node({ size : { width : Points(100), height : Points(100) } }, []);
		var node = new Node({ flexDirection : Column }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(100, node000.layout.size.width);
		Assert.equals(100, node000.layout.size.height);
		Assert.equals(0, node000.layout.location.x);
		Assert.equals(0, node000.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(100, node1.layout.location.y);
	}
	function test_justify_content_column_center() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, justifyContent : Center, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(35, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(10, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(45, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(10, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(55, node2.layout.location.y);
	}
	function test_justify_content_column_flex_end() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, justifyContent : FlexEnd, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(70, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(10, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(80, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(10, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(90, node2.layout.location.y);
	}
	function test_justify_content_column_flex_start() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(10, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(10, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(10, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(20, node2.layout.location.y);
	}
	function test_justify_content_column_min_height_and_margin_bottom() {
		var node0 = new Node({ size : { width : Points(20), height : Points(20) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, justifyContent : Center, minSize : { width : Auto, height : Points(50) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(20, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(20, node0.layout.size.width);
		Assert.equals(20, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_justify_content_column_min_height_and_margin_top() {
		var node0 = new Node({ size : { width : Points(20), height : Points(20) }, margin : { start : Auto, end : Auto, top : Points(10), bottom : Auto } }, []);
		var node = new Node({ flexDirection : Column, justifyContent : Center, minSize : { width : Auto, height : Points(50) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(20, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(20, node0.layout.size.width);
		Assert.equals(20, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(20, node0.layout.location.y);
	}
	function test_justify_content_column_space_around() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, justifyContent : SpaceAround, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(12, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(10, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(45, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(10, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(78, node2.layout.location.y);
	}
	function test_justify_content_column_space_between() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, justifyContent : SpaceBetween, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(10, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(45, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(10, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(90, node2.layout.location.y);
	}
	function test_justify_content_column_space_evenly() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, justifyContent : SpaceEvenly, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(18, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(10, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(45, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(10, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(73, node2.layout.location.y);
	}
	function test_justify_content_min_max() {
		var node0 = new Node({ size : { width : Points(60), height : Points(60) } }, []);
		var node = new Node({ flexDirection : Column, justifyContent : Center, size : { width : Points(100), height : Auto }, minSize : { width : Auto, height : Points(100) }, maxSize : { width : Auto, height : Points(200) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(60, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(20, node0.layout.location.y);
	}
	function test_justify_content_min_width_with_padding_child_width_greater_than_parent() {
		var node000 = new Node({ size : { width : Points(300), height : Points(100) } }, []);
		var node00 = new Node({ justifyContent : Center, minSize : { width : Points(400), height : Auto }, padding : { start : Points(100), end : Points(100), top : Auto, bottom : Auto } }, [node000]);
		var node0 = new Node({  }, [node00]);
		var node = new Node({ flexDirection : Column, size : { width : Points(1000), height : Points(1584) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(1000, node.layout.size.width);
		Assert.equals(1584, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(1000, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(500, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(300, node000.layout.size.width);
		Assert.equals(100, node000.layout.size.height);
		Assert.equals(100, node000.layout.location.x);
		Assert.equals(0, node000.layout.location.y);
	}
	function test_justify_content_min_width_with_padding_child_width_lower_than_parent() {
		var node000 = new Node({ size : { width : Points(199), height : Points(100) } }, []);
		var node00 = new Node({ justifyContent : Center, minSize : { width : Points(400), height : Auto }, padding : { start : Points(100), end : Points(100), top : Auto, bottom : Auto } }, [node000]);
		var node0 = new Node({  }, [node00]);
		var node = new Node({ flexDirection : Column, size : { width : Points(1080), height : Points(1584) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(1080, node.layout.size.width);
		Assert.equals(1584, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(1080, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(400, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(199, node000.layout.size.width);
		Assert.equals(100, node000.layout.size.height);
		Assert.equals(101, node000.layout.location.x);
		Assert.equals(0, node000.layout.location.y);
	}
	function test_justify_content_overflow_min_max() {
		var node0 = new Node({ flexShrink : 0, size : { width : Points(50), height : Points(50) } }, []);
		var node1 = new Node({ flexShrink : 0, size : { width : Points(50), height : Points(50) } }, []);
		var node2 = new Node({ flexShrink : 0, size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ flexDirection : Column, justifyContent : Center, minSize : { width : Auto, height : Points(100) }, maxSize : { width : Auto, height : Points(110) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(50, node.layout.size.width);
		Assert.equals(110, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(-20, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(30, node1.layout.location.y);
		Assert.equals(50, node2.layout.size.width);
		Assert.equals(50, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(80, node2.layout.location.y);
	}
	function test_justify_content_row_center() {
		var node0 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node1 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node2 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ justifyContent : Center, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(35, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(10, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(45, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(10, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(55, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_justify_content_row_flex_end() {
		var node0 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node1 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node2 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ justifyContent : FlexEnd, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(70, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(10, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(80, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(10, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(90, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_justify_content_row_flex_start() {
		var node0 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node1 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node2 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(10, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(10, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(10, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(20, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_justify_content_row_max_width_and_margin() {
		var node0 = new Node({ size : { width : Points(20), height : Points(20) }, margin : { start : Points(100), end : Auto, top : Auto, bottom : Auto } }, []);
		var node = new Node({ justifyContent : Center, size : { width : Points(100), height : Auto }, maxSize : { width : Points(80), height : Auto } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(80, node.layout.size.width);
		Assert.equals(20, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(20, node0.layout.size.height);
		Assert.equals(90, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_justify_content_row_min_width_and_margin() {
		var node0 = new Node({ size : { width : Points(20), height : Points(20) }, margin : { start : Points(10), end : Auto, top : Auto, bottom : Auto } }, []);
		var node = new Node({ justifyContent : Center, minSize : { width : Points(50), height : Auto } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(50, node.layout.size.width);
		Assert.equals(20, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(20, node0.layout.size.width);
		Assert.equals(20, node0.layout.size.height);
		Assert.equals(20, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_justify_content_row_space_around() {
		var node0 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node1 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node2 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ justifyContent : SpaceAround, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(12, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(10, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(45, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(10, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(78, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_justify_content_row_space_between() {
		var node0 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node1 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node2 = new Node({ size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ justifyContent : SpaceBetween, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(10, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(45, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(10, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(90, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_justify_content_row_space_evenly() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ justifyContent : SpaceEvenly, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(25, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(0, node1.layout.size.width);
		Assert.equals(10, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(0, node2.layout.size.width);
		Assert.equals(10, node2.layout.size.height);
		Assert.equals(75, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_margin_and_flex_column() {
		var node0 = new Node({ flexGrow : 1, margin : { start : Auto, end : Auto, top : Points(10), bottom : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(80, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_margin_and_flex_row() {
		var node0 = new Node({ flexGrow : 1, margin : { start : Points(10), end : Points(10), top : Auto, bottom : Auto } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(80, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_margin_and_stretch_column() {
		var node0 = new Node({ flexGrow : 1, margin : { start : Points(10), end : Points(10), top : Auto, bottom : Auto } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(80, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_margin_and_stretch_row() {
		var node0 = new Node({ flexGrow : 1, margin : { start : Auto, end : Auto, top : Points(10), bottom : Points(10) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(80, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_margin_auto_bottom() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(75, node1.layout.location.y);
	}
	function test_margin_auto_bottom_and_top() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(75, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(75, node1.layout.location.y);
	}
	function test_margin_auto_bottom_and_top_justify_center() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ justifyContent : Center, size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(50, node0.layout.location.x);
		Assert.equals(75, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(100, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_margin_auto_left() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(100, node0.layout.location.x);
		Assert.equals(75, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(150, node1.layout.location.x);
		Assert.equals(75, node1.layout.location.y);
	}
	function test_margin_auto_left_and_right() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(50, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(150, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_margin_auto_left_and_right_column() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(50, node0.layout.location.x);
		Assert.equals(75, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(150, node1.layout.location.x);
		Assert.equals(75, node1.layout.location.y);
	}
	function test_margin_auto_left_and_right_column_and_center() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(50, node0.layout.location.x);
		Assert.equals(75, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(150, node1.layout.location.x);
		Assert.equals(75, node1.layout.location.y);
	}
	function test_margin_auto_left_and_right_strech() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(50, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(150, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_margin_auto_left_child_bigger_than_parent() {
		var node0 = new Node({ size : { width : Points(72), height : Points(72) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node = new Node({ justifyContent : Center, size : { width : Points(52), height : Points(52) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(52, node.layout.size.width);
		Assert.equals(52, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(52, node0.layout.size.width);
		Assert.equals(72, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_margin_auto_left_fix_right_child_bigger_than_parent() {
		var node0 = new Node({ size : { width : Points(72), height : Points(72) }, margin : { start : Auto, end : Points(10), top : Auto, bottom : Auto } }, []);
		var node = new Node({ justifyContent : Center, size : { width : Points(52), height : Points(52) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(52, node.layout.size.width);
		Assert.equals(52, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(42, node0.layout.size.width);
		Assert.equals(72, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_margin_auto_left_right_child_bigger_than_parent() {
		var node0 = new Node({ size : { width : Points(72), height : Points(72) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node = new Node({ justifyContent : Center, size : { width : Points(52), height : Points(52) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(52, node.layout.size.width);
		Assert.equals(52, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(52, node0.layout.size.width);
		Assert.equals(72, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_margin_auto_left_stretching_child() {
		var node0 = new Node({ flexGrow : 1, flexShrink : 1, flexBasis : Percent(0), margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(150, node0.layout.size.width);
		Assert.equals(0, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(100, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(150, node1.layout.location.x);
		Assert.equals(75, node1.layout.location.y);
	}
	function test_margin_auto_mutiple_children_column() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node2 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ flexDirection : Column, alignItems : Center, size : { width : Points(200), height : Points(200) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(75, node0.layout.location.x);
		Assert.equals(25, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(75, node1.layout.location.x);
		Assert.equals(100, node1.layout.location.y);
		Assert.equals(50, node2.layout.size.width);
		Assert.equals(50, node2.layout.size.height);
		Assert.equals(75, node2.layout.location.x);
		Assert.equals(150, node2.layout.location.y);
	}
	function test_margin_auto_mutiple_children_row() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node2 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(200), height : Points(200) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(75, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(75, node1.layout.location.x);
		Assert.equals(75, node1.layout.location.y);
		Assert.equals(50, node2.layout.size.width);
		Assert.equals(50, node2.layout.size.height);
		Assert.equals(150, node2.layout.location.x);
		Assert.equals(75, node2.layout.location.y);
	}
	function test_margin_auto_right() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(75, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(150, node1.layout.location.x);
		Assert.equals(75, node1.layout.location.y);
	}
	function test_margin_auto_top() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(150, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(75, node1.layout.location.y);
	}
	function test_margin_auto_top_and_bottom_strech() {
		var node0 = new Node({ size : { width : Points(50), height : Points(50) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(50, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(150, node1.layout.location.y);
	}
	function test_margin_auto_top_stretching_child() {
		var node0 = new Node({ flexGrow : 1, flexShrink : 1, flexBasis : Percent(0), margin : { start : Auto, end : Auto, top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node = new Node({ alignItems : Center, size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(150, node0.layout.size.width);
		Assert.equals(0, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(200, node0.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(50, node1.layout.size.height);
		Assert.equals(150, node1.layout.location.x);
		Assert.equals(75, node1.layout.location.y);
	}
	function test_margin_bottom() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) }, margin : { start : Auto, end : Auto, top : Auto, bottom : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, justifyContent : FlexEnd, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(80, node0.layout.location.y);
	}
	function test_margin_fix_left_auto_right_child_bigger_than_parent() {
		var node0 = new Node({ size : { width : Points(72), height : Points(72) }, margin : { start : Points(10), end : Auto, top : Auto, bottom : Auto } }, []);
		var node = new Node({ justifyContent : Center, size : { width : Points(52), height : Points(52) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(52, node.layout.size.width);
		Assert.equals(52, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(42, node0.layout.size.width);
		Assert.equals(72, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_margin_left() {
		var node0 = new Node({ size : { width : Points(10), height : Auto }, margin : { start : Points(10), end : Auto, top : Auto, bottom : Auto } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_margin_right() {
		var node0 = new Node({ size : { width : Points(10), height : Auto }, margin : { start : Auto, end : Points(10), top : Auto, bottom : Auto } }, []);
		var node = new Node({ justifyContent : FlexEnd, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(80, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_margin_should_not_be_part_of_max_height() {
		var node0 = new Node({ size : { width : Points(100), height : Points(100) }, maxSize : { width : Auto, height : Points(100) }, margin : { start : Auto, end : Auto, top : Points(20), bottom : Auto } }, []);
		var node = new Node({ size : { width : Points(250), height : Points(250) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(250, node.layout.size.width);
		Assert.equals(250, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(20, node0.layout.location.y);
	}
	function test_margin_should_not_be_part_of_max_width() {
		var node0 = new Node({ size : { width : Points(100), height : Points(100) }, maxSize : { width : Points(100), height : Auto }, margin : { start : Points(20), end : Auto, top : Auto, bottom : Auto } }, []);
		var node = new Node({ size : { width : Points(250), height : Points(250) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(250, node.layout.size.width);
		Assert.equals(250, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(20, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_margin_top() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) }, margin : { start : Auto, end : Auto, top : Points(10), bottom : Auto } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_margin_with_sibling_column() {
		var node0 = new Node({ flexGrow : 1, margin : { start : Auto, end : Auto, top : Auto, bottom : Points(10) } }, []);
		var node1 = new Node({ flexGrow : 1 }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(45, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(45, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(55, node1.layout.location.y);
	}
	function test_margin_with_sibling_row() {
		var node0 = new Node({ flexGrow : 1, margin : { start : Auto, end : Points(10), top : Auto, bottom : Auto } }, []);
		var node1 = new Node({ flexGrow : 1 }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(45, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(45, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(55, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_max_height() {
		var node0 = new Node({ size : { width : Points(10), height : Auto }, maxSize : { width : Auto, height : Points(50) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_max_height_overrides_height() {
		var node0 = new Node({ size : { width : Auto, height : Points(200) }, maxSize : { width : Auto, height : Points(100) } }, []);
		var node = new Node({  }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(0, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_max_height_overrides_height_on_root() {
		var node = new Node({ size : { width : Auto, height : Points(200) }, maxSize : { width : Auto, height : Points(100) } }, []);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(0, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
	}
	function test_max_width() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) }, maxSize : { width : Points(50), height : Auto } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_max_width_overrides_width() {
		var node0 = new Node({ size : { width : Points(200), height : Auto }, maxSize : { width : Points(100), height : Auto } }, []);
		var node = new Node({  }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(0, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(0, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_max_width_overrides_width_on_root() {
		var node = new Node({ size : { width : Points(200), height : Auto }, maxSize : { width : Points(100), height : Auto } }, []);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(0, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
	}
	function test_min_height() {
		var node0 = new Node({ flexGrow : 1, minSize : { width : Auto, height : Points(60) } }, []);
		var node1 = new Node({ flexGrow : 1 }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(60, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(40, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(60, node1.layout.location.y);
	}
	function test_min_height_overrides_height() {
		var node0 = new Node({ size : { width : Auto, height : Points(50) }, minSize : { width : Auto, height : Points(100) } }, []);
		var node = new Node({  }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(0, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_min_height_overrides_height_on_root() {
		var node = new Node({ size : { width : Auto, height : Points(50) }, minSize : { width : Auto, height : Points(100) } }, []);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(0, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
	}
	function test_min_max_percent_no_width_height() {
		var node0 = new Node({ minSize : { width : Percent(0.1), height : Percent(0.1) }, maxSize : { width : Percent(0.1), height : Percent(0.1) } }, []);
		var node = new Node({ flexDirection : Column, alignItems : FlexStart, size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_min_width() {
		var node0 = new Node({ flexGrow : 1, minSize : { width : Points(60), height : Auto } }, []);
		var node1 = new Node({ flexGrow : 1 }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(40, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(60, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_min_width_overrides_width() {
		var node0 = new Node({ size : { width : Points(50), height : Auto }, minSize : { width : Points(100), height : Auto } }, []);
		var node = new Node({  }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(0, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(0, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_min_width_overrides_width_on_root() {
		var node = new Node({ size : { width : Points(50), height : Auto }, minSize : { width : Points(100), height : Auto } }, []);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(0, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
	}
	function test_nested_overflowing_child() {
		var node00 = new Node({ size : { width : Points(200), height : Points(200) } }, []);
		var node0 = new Node({  }, [node00]);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(200, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(200, node00.layout.size.width);
		Assert.equals(200, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_nested_overflowing_child_in_constraint_parent() {
		var node00 = new Node({ size : { width : Points(200), height : Points(200) } }, []);
		var node0 = new Node({ size : { width : Points(100), height : Points(100) } }, [node00]);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node00.layout.size.width);
		Assert.equals(200, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_overflow_cross_axis() {
		var node0 = new Node({ size : { width : Points(100), height : Points(200) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(200, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_overflow_main_axis() {
		var node0 = new Node({ flexShrink : 0, size : { width : Points(200), height : Auto } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(200, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_padding_align_end_child() {
		var node0 = new Node({ size : { width : Points(100), height : Points(100) }, padding : { start : Points(20), end : Points(20), top : Points(20), bottom : Points(20) } }, []);
		var node = new Node({ alignItems : FlexEnd, justifyContent : FlexEnd, size : { width : Points(200), height : Points(200) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(100, node0.layout.location.x);
		Assert.equals(100, node0.layout.location.y);
	}
	function test_padding_center_child() {
		var node0 = new Node({ size : { width : Points(10), height : Points(10) } }, []);
		var node = new Node({ alignItems : Center, justifyContent : Center, size : { width : Points(100), height : Points(100) }, padding : { start : Points(10), end : Points(20), top : Points(10), bottom : Points(20) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(40, node0.layout.location.x);
		Assert.equals(40, node0.layout.location.y);
	}
	function test_padding_flex_child() {
		var node0 = new Node({ flexGrow : 1, size : { width : Points(10), height : Auto } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) }, padding : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(80, node0.layout.size.width);
		Assert.equals(80, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_padding_no_child() {
		var node = new Node({ padding : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) } }, []);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(20, node.layout.size.width);
		Assert.equals(20, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
	}
	function test_padding_stretch_child() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) }, padding : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_parent_wrap_child_size_overflowing_parent() {
		var node00 = new Node({ size : { width : Points(100), height : Points(200) } }, []);
		var node0 = new Node({ size : { width : Points(100), height : Auto } }, [node00]);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node00.layout.size.width);
		Assert.equals(200, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_percentage_absolute_position() {
		var node0 = new Node({ positionType : Absolute, size : { width : Points(10), height : Points(10) }, position : { start : Percent(0.3), end : Auto, top : Percent(0.1), bottom : Auto } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(60, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_percentage_container_in_wrapping_container() {
		var node000 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node001 = new Node({ size : { width : Points(50), height : Points(50) } }, []);
		var node00 = new Node({ justifyContent : Center, size : { width : Percent(1), height : Auto } }, [node000, node001]);
		var node0 = new Node({ flexDirection : Column }, [node00]);
		var node = new Node({ flexDirection : Column, alignItems : Center, justifyContent : Center, size : { width : Points(200), height : Points(200) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(50, node0.layout.location.x);
		Assert.equals(75, node0.layout.location.y);
		Assert.equals(100, node00.layout.size.width);
		Assert.equals(50, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(50, node000.layout.size.width);
		Assert.equals(50, node000.layout.size.height);
		Assert.equals(0, node000.layout.location.x);
		Assert.equals(0, node000.layout.location.y);
		Assert.equals(50, node001.layout.size.width);
		Assert.equals(50, node001.layout.size.height);
		Assert.equals(50, node001.layout.location.x);
		Assert.equals(0, node001.layout.location.y);
	}
	function test_percentage_flex_basis() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Percent(0.5) }, []);
		var node1 = new Node({ flexGrow : 1, flexBasis : Percent(0.25) }, []);
		var node = new Node({ size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(125, node0.layout.size.width);
		Assert.equals(200, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(75, node1.layout.size.width);
		Assert.equals(200, node1.layout.size.height);
		Assert.equals(125, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_percentage_flex_basis_cross() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Percent(0.5) }, []);
		var node1 = new Node({ flexGrow : 1, flexBasis : Percent(0.25) }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(400) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(400, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(200, node0.layout.size.width);
		Assert.equals(250, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(200, node1.layout.size.width);
		Assert.equals(150, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(250, node1.layout.location.y);
	}
	function test_percentage_flex_basis_cross_max_height() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Percent(0.1), maxSize : { width : Auto, height : Percent(0.6) } }, []);
		var node1 = new Node({ flexGrow : 4, flexBasis : Percent(0.1), maxSize : { width : Auto, height : Percent(0.2) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(400) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(400, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(200, node0.layout.size.width);
		Assert.equals(240, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(200, node1.layout.size.width);
		Assert.equals(80, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(240, node1.layout.location.y);
	}
	function test_percentage_flex_basis_cross_max_width() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Percent(0.1), maxSize : { width : Percent(0.6), height : Auto } }, []);
		var node1 = new Node({ flexGrow : 4, flexBasis : Percent(0.15), maxSize : { width : Percent(0.2), height : Auto } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(400) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(400, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(120, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(40, node1.layout.size.width);
		Assert.equals(300, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(100, node1.layout.location.y);
	}
	function test_percentage_flex_basis_cross_min_height() {
		var node0 = new Node({ flexGrow : 1, minSize : { width : Auto, height : Percent(0.6) } }, []);
		var node1 = new Node({ flexGrow : 2, minSize : { width : Auto, height : Percent(0.1) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(400) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(400, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(200, node0.layout.size.width);
		Assert.equals(240, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(200, node1.layout.size.width);
		Assert.equals(160, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(240, node1.layout.location.y);
	}
	function test_percentage_flex_basis_cross_min_width() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Percent(0.1), minSize : { width : Percent(0.6), height : Auto } }, []);
		var node1 = new Node({ flexGrow : 4, flexBasis : Percent(0.15), minSize : { width : Percent(0.2), height : Auto } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(400) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(400, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(200, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(200, node1.layout.size.width);
		Assert.equals(300, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(100, node1.layout.location.y);
	}
	function test_percentage_flex_basis_main_max_height() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Percent(0.1), maxSize : { width : Auto, height : Percent(0.6) } }, []);
		var node1 = new Node({ flexGrow : 4, flexBasis : Percent(0.1), maxSize : { width : Auto, height : Percent(0.2) } }, []);
		var node = new Node({ size : { width : Points(200), height : Points(400) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(400, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(52, node0.layout.size.width);
		Assert.equals(240, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(148, node1.layout.size.width);
		Assert.equals(80, node1.layout.size.height);
		Assert.equals(52, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_percentage_flex_basis_main_max_width() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Percent(0.15), maxSize : { width : Percent(0.6), height : Auto } }, []);
		var node1 = new Node({ flexGrow : 4, flexBasis : Percent(0.1), maxSize : { width : Percent(0.2), height : Auto } }, []);
		var node = new Node({ size : { width : Points(200), height : Points(400) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(400, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(120, node0.layout.size.width);
		Assert.equals(400, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(40, node1.layout.size.width);
		Assert.equals(400, node1.layout.size.height);
		Assert.equals(120, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_percentage_flex_basis_main_min_width() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Percent(0.15), minSize : { width : Percent(0.6), height : Auto } }, []);
		var node1 = new Node({ flexGrow : 4, flexBasis : Percent(0.1), minSize : { width : Percent(0.2), height : Auto } }, []);
		var node = new Node({ size : { width : Points(200), height : Points(400) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(400, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(120, node0.layout.size.width);
		Assert.equals(400, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(80, node1.layout.size.width);
		Assert.equals(400, node1.layout.size.height);
		Assert.equals(120, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
	}
	function test_percentage_margin_should_calculate_based_only_on_width() {
		var node00 = new Node({ size : { width : Points(10), height : Points(10) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, margin : { start : Percent(0.1), end : Percent(0.1), top : Percent(0.1), bottom : Percent(0.1) } }, [node00]);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(160, node0.layout.size.width);
		Assert.equals(60, node0.layout.size.height);
		Assert.equals(20, node0.layout.location.x);
		Assert.equals(20, node0.layout.location.y);
		Assert.equals(10, node00.layout.size.width);
		Assert.equals(10, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_percentage_multiple_nested_with_padding_margin_and_percentage_values() {
		var node000 = new Node({ size : { width : Percent(0.45), height : Auto }, margin : { start : Percent(0.05), end : Percent(0.05), top : Percent(0.05), bottom : Percent(0.05) }, padding : { start : Points(3), end : Points(3), top : Points(3), bottom : Points(3) } }, []);
		var node00 = new Node({ flexDirection : Column, size : { width : Percent(0.5), height : Auto }, margin : { start : Points(5), end : Points(5), top : Points(5), bottom : Points(5) }, padding : { start : Percent(0.03), end : Percent(0.03), top : Percent(0.03), bottom : Percent(0.03) } }, [node000]);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, flexBasis : Percent(0.1), minSize : { width : Percent(0.6), height : Auto }, margin : { start : Points(5), end : Points(5), top : Points(5), bottom : Points(5) }, padding : { start : Points(3), end : Points(3), top : Points(3), bottom : Points(3) } }, [node00]);
		var node1 = new Node({ flexGrow : 4, flexBasis : Percent(0.15), minSize : { width : Percent(0.2), height : Auto } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(200) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(190, node0.layout.size.width);
		Assert.equals(48, node0.layout.size.height);
		Assert.equals(5, node0.layout.location.x);
		Assert.equals(5, node0.layout.location.y);
		Assert.equals(92, node00.layout.size.width);
		Assert.equals(25, node00.layout.size.height);
		Assert.equals(8, node00.layout.location.x);
		Assert.equals(8, node00.layout.location.y);
		Assert.equals(36, node000.layout.size.width);
		Assert.equals(6, node000.layout.size.height);
		Assert.equals(10, node000.layout.location.x);
		Assert.equals(10, node000.layout.location.y);
		Assert.equals(200, node1.layout.size.width);
		Assert.equals(142, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(58, node1.layout.location.y);
	}
	function test_percentage_padding_should_calculate_based_only_on_width() {
		var node00 = new Node({ size : { width : Points(10), height : Points(10) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, padding : { start : Percent(0.1), end : Percent(0.1), top : Percent(0.1), bottom : Percent(0.1) } }, [node00]);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(100) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(200, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(10, node00.layout.size.width);
		Assert.equals(10, node00.layout.size.height);
		Assert.equals(20, node00.layout.location.x);
		Assert.equals(20, node00.layout.location.y);
	}
	function test_percentage_position_bottom_right() {
		var node0 = new Node({ size : { width : Percent(0.55), height : Percent(0.15) }, position : { start : Auto, end : Percent(0.2), top : Auto, bottom : Percent(0.1) } }, []);
		var node = new Node({ size : { width : Points(500), height : Points(500) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(500, node.layout.size.width);
		Assert.equals(500, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(275, node0.layout.size.width);
		Assert.equals(75, node0.layout.size.height);
		Assert.equals(-100, node0.layout.location.x);
		Assert.equals(-50, node0.layout.location.y);
	}
	function test_percentage_position_left_top() {
		var node0 = new Node({ size : { width : Percent(0.45), height : Percent(0.55) }, position : { start : Percent(0.1), end : Auto, top : Percent(0.2), bottom : Auto } }, []);
		var node = new Node({ size : { width : Points(400), height : Points(400) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(400, node.layout.size.width);
		Assert.equals(400, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(180, node0.layout.size.width);
		Assert.equals(220, node0.layout.size.height);
		Assert.equals(40, node0.layout.location.x);
		Assert.equals(80, node0.layout.location.y);
	}
	function test_percentage_size_based_on_parent_inner_size() {
		var node0 = new Node({ size : { width : Percent(0.5), height : Percent(0.5) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(200), height : Points(400) }, padding : { start : Points(20), end : Points(20), top : Points(20), bottom : Points(20) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(400, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(80, node0.layout.size.width);
		Assert.equals(180, node0.layout.size.height);
		Assert.equals(20, node0.layout.location.x);
		Assert.equals(20, node0.layout.location.y);
	}
	function test_percentage_size_of_flex_basis() {
		var node00 = new Node({ size : { width : Percent(1), height : Points(100) } }, []);
		var node0 = new Node({ flexBasis : Points(50) }, [node00]);
		var node = new Node({ size : { width : Points(100), height : Auto } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(50, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_percentage_width_height() {
		var node0 = new Node({ size : { width : Percent(0.3), height : Percent(0.3) } }, []);
		var node = new Node({ size : { width : Points(200), height : Points(400) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(400, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(120, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_percentage_width_height_undefined_parent_size() {
		var node0 = new Node({ size : { width : Percent(0.5), height : Percent(0.5) } }, []);
		var node = new Node({ flexDirection : Column }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(0, node.layout.size.width);
		Assert.equals(0, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(0, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_percent_absolute_position() {
		var node00 = new Node({ size : { width : Percent(1), height : Auto } }, []);
		var node01 = new Node({ size : { width : Percent(1), height : Auto } }, []);
		var node0 = new Node({ positionType : Absolute, size : { width : Percent(1), height : Points(50) }, position : { start : Percent(0.5), end : Auto, top : Auto, bottom : Auto } }, [node00, node01]);
		var node = new Node({ flexDirection : Column, size : { width : Points(60), height : Points(50) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(60, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(60, node0.layout.size.width);
		Assert.equals(50, node0.layout.size.height);
		Assert.equals(30, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(30, node00.layout.size.width);
		Assert.equals(50, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(30, node01.layout.size.width);
		Assert.equals(50, node01.layout.size.height);
		Assert.equals(30, node01.layout.location.x);
		Assert.equals(0, node01.layout.location.y);
	}
	function test_percent_within_flex_grow() {
		var node0 = new Node({ size : { width : Points(100), height : Auto } }, []);
		var node10 = new Node({ size : { width : Percent(1), height : Auto } }, []);
		var node1 = new Node({ flexDirection : Column, flexGrow : 1 }, [node10]);
		var node2 = new Node({ size : { width : Points(100), height : Auto } }, []);
		var node = new Node({ size : { width : Points(350), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(350, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(150, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(100, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(150, node10.layout.size.width);
		Assert.equals(0, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(250, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_relative_position_should_not_nudge_siblings() {
		var node0 = new Node({ size : { width : Auto, height : Points(10) }, position : { start : Auto, end : Auto, top : Points(15), bottom : Auto } }, []);
		var node1 = new Node({ size : { width : Auto, height : Points(10) }, position : { start : Auto, end : Auto, top : Points(15), bottom : Auto } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(100) } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(15, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(10, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(25, node1.layout.location.y);
	}
	function test_rounding_flex_basis_flex_grow_row_prime_number_width() {
		var node0 = new Node({ flexGrow : 1 }, []);
		var node1 = new Node({ flexGrow : 1 }, []);
		var node2 = new Node({ flexGrow : 1 }, []);
		var node3 = new Node({ flexGrow : 1 }, []);
		var node4 = new Node({ flexGrow : 1 }, []);
		var node = new Node({ size : { width : Points(113), height : Points(100) } }, [node0, node1, node2, node3, node4]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(113, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(23, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(22, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(23, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(23, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(45, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
		Assert.equals(22, node3.layout.size.width);
		Assert.equals(100, node3.layout.size.height);
		Assert.equals(68, node3.layout.location.x);
		Assert.equals(0, node3.layout.location.y);
		Assert.equals(23, node4.layout.size.width);
		Assert.equals(100, node4.layout.size.height);
		Assert.equals(90, node4.layout.location.x);
		Assert.equals(0, node4.layout.location.y);
	}
	function test_rounding_flex_basis_flex_grow_row_width_of_100() {
		var node0 = new Node({ flexGrow : 1 }, []);
		var node1 = new Node({ flexGrow : 1 }, []);
		var node2 = new Node({ flexGrow : 1 }, []);
		var node = new Node({ size : { width : Points(100), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(33, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(34, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(33, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(33, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(67, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_rounding_flex_basis_flex_shrink_row() {
		var node0 = new Node({ flexShrink : 1, flexBasis : Points(100) }, []);
		var node1 = new Node({ flexBasis : Points(25) }, []);
		var node2 = new Node({ flexBasis : Points(25) }, []);
		var node = new Node({ size : { width : Points(101), height : Points(100) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(101, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(67, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(17, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(67, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(17, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(84, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
	}
	function test_rounding_flex_basis_overrides_main_size() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Points(50), size : { width : Auto, height : Points(20) } }, []);
		var node1 = new Node({ flexGrow : 1, size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ flexGrow : 1, size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(113) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(113, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(64, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(25, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(64, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(24, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(89, node2.layout.location.y);
	}
	function test_rounding_fractial_input_1() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Points(50), size : { width : Auto, height : Points(20) } }, []);
		var node1 = new Node({ flexGrow : 1, size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ flexGrow : 1, size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(113.4) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(113, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(64, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(25, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(64, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(24, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(89, node2.layout.location.y);
	}
	function test_rounding_fractial_input_2() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Points(50), size : { width : Auto, height : Points(20) } }, []);
		var node1 = new Node({ flexGrow : 1, size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ flexGrow : 1, size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(113.6) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(114, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(65, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(24, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(65, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(25, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(89, node2.layout.location.y);
	}
	function test_rounding_fractial_input_3() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Points(50), size : { width : Auto, height : Points(20) } }, []);
		var node1 = new Node({ flexGrow : 1, size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ flexGrow : 1, size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(113.4) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(113, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(64, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(25, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(64, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(24, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(89, node2.layout.location.y);
	}
	function test_rounding_fractial_input_4() {
		var node0 = new Node({ flexGrow : 1, flexBasis : Points(50), size : { width : Auto, height : Points(20) } }, []);
		var node1 = new Node({ flexGrow : 1, size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ flexGrow : 1, size : { width : Auto, height : Points(10) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(100), height : Points(113.4) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(113, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(64, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(25, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(64, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(24, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(89, node2.layout.location.y);
	}
	function test_rounding_total_fractial() {
		var node0 = new Node({ flexGrow : 0.7, flexBasis : Points(50.3), size : { width : Auto, height : Points(20.3) } }, []);
		var node1 = new Node({ flexGrow : 1.6, size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ flexGrow : 1.1, size : { width : Auto, height : Points(10.7) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(87.4), height : Points(113.4) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(87, node.layout.size.width);
		Assert.equals(113, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(87, node0.layout.size.width);
		Assert.equals(59, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(87, node1.layout.size.width);
		Assert.equals(30, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(59, node1.layout.location.y);
		Assert.equals(87, node2.layout.size.width);
		Assert.equals(24, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(89, node2.layout.location.y);
	}
	function test_rounding_total_fractial_nested() {
		var node00 = new Node({ flexGrow : 1, flexBasis : Points(0.3), size : { width : Auto, height : Points(9.9) }, position : { start : Auto, end : Auto, top : Auto, bottom : Points(13.3) } }, []);
		var node01 = new Node({ flexGrow : 4, flexBasis : Points(0.3), size : { width : Auto, height : Points(1.1) }, position : { start : Auto, end : Auto, top : Points(13.3), bottom : Auto } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 0.7, flexBasis : Points(50.3), size : { width : Auto, height : Points(20.3) } }, [node00, node01]);
		var node1 = new Node({ flexGrow : 1.6, size : { width : Auto, height : Points(10) } }, []);
		var node2 = new Node({ flexGrow : 1.1, size : { width : Auto, height : Points(10.7) } }, []);
		var node = new Node({ flexDirection : Column, size : { width : Points(87.4), height : Points(113.4) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(87, node.layout.size.width);
		Assert.equals(113, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(87, node0.layout.size.width);
		Assert.equals(59, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(87, node00.layout.size.width);
		Assert.equals(12, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(-13, node00.layout.location.y);
		Assert.equals(87, node01.layout.size.width);
		Assert.equals(47, node01.layout.size.height);
		Assert.equals(0, node01.layout.location.x);
		Assert.equals(25, node01.layout.location.y);
		Assert.equals(87, node1.layout.size.width);
		Assert.equals(30, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(59, node1.layout.location.y);
		Assert.equals(87, node2.layout.size.width);
		Assert.equals(24, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(89, node2.layout.location.y);
	}
	function test_size_defined_by_child() {
		var node0 = new Node({ size : { width : Points(100), height : Points(100) } }, []);
		var node = new Node({  }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
	}
	function test_size_defined_by_child_with_border() {
		var node0 = new Node({ size : { width : Points(10), height : Points(10) } }, []);
		var node = new Node({ border : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(30, node.layout.size.width);
		Assert.equals(30, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_size_defined_by_child_with_padding() {
		var node0 = new Node({ size : { width : Points(10), height : Points(10) } }, []);
		var node = new Node({ padding : { start : Points(10), end : Points(10), top : Points(10), bottom : Points(10) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(30, node.layout.size.width);
		Assert.equals(30, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(10, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(10, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
	}
	function test_size_defined_by_grand_child() {
		var node00 = new Node({ size : { width : Points(100), height : Points(100) } }, []);
		var node0 = new Node({  }, [node00]);
		var node = new Node({  }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(100, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
	}
	function test_width_smaller_then_content_with_flex_grow_large_size() {
		var node00 = new Node({ size : { width : Points(70), height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, size : { width : Points(0), height : Auto } }, [node00]);
		var node10 = new Node({ size : { width : Points(20), height : Points(100) } }, []);
		var node1 = new Node({ flexDirection : Column, flexGrow : 1, size : { width : Points(0), height : Auto } }, [node10]);
		var node = new Node({ size : { width : Points(100), height : Auto } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(50, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(70, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(50, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(50, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(20, node10.layout.size.width);
		Assert.equals(100, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
	}
	function test_width_smaller_then_content_with_flex_grow_small_size() {
		var node00 = new Node({ size : { width : Points(70), height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, size : { width : Points(0), height : Auto } }, [node00]);
		var node10 = new Node({ size : { width : Points(20), height : Points(100) } }, []);
		var node1 = new Node({ flexDirection : Column, flexGrow : 1, size : { width : Points(0), height : Auto } }, [node10]);
		var node = new Node({ size : { width : Points(10), height : Auto } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(10, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(5, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(70, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(5, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(5, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(20, node10.layout.size.width);
		Assert.equals(100, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
	}
	function test_width_smaller_then_content_with_flex_grow_unconstraint_size() {
		var node00 = new Node({ size : { width : Points(70), height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, size : { width : Points(0), height : Auto } }, [node00]);
		var node10 = new Node({ size : { width : Points(20), height : Points(100) } }, []);
		var node1 = new Node({ flexDirection : Column, flexGrow : 1, size : { width : Points(0), height : Auto } }, [node10]);
		var node = new Node({  }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(0, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(0, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(70, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(0, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(20, node10.layout.size.width);
		Assert.equals(100, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
	}
	function test_width_smaller_then_content_with_flex_grow_very_large_size() {
		var node00 = new Node({ size : { width : Points(70), height : Points(100) } }, []);
		var node0 = new Node({ flexDirection : Column, flexGrow : 1, size : { width : Points(0), height : Auto } }, [node00]);
		var node10 = new Node({ size : { width : Points(20), height : Points(100) } }, []);
		var node1 = new Node({ flexDirection : Column, flexGrow : 1, size : { width : Points(0), height : Auto } }, [node10]);
		var node = new Node({ size : { width : Points(200), height : Auto } }, [node0, node1]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(100, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(70, node00.layout.size.width);
		Assert.equals(100, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(100, node1.layout.size.width);
		Assert.equals(100, node1.layout.size.height);
		Assert.equals(100, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(20, node10.layout.size.width);
		Assert.equals(100, node10.layout.size.height);
		Assert.equals(0, node10.layout.location.x);
		Assert.equals(0, node10.layout.location.y);
	}
	function test_wrapped_column_max_height() {
		var node0 = new Node({ size : { width : Points(100), height : Points(500) }, maxSize : { width : Auto, height : Points(200) } }, []);
		var node1 = new Node({ size : { width : Points(200), height : Points(200) }, margin : { start : Points(20), end : Points(20), top : Points(20), bottom : Points(20) } }, []);
		var node2 = new Node({ size : { width : Points(100), height : Points(100) } }, []);
		var node = new Node({ flexDirection : Column, flexWrap : Wrap, alignItems : Center, alignContent : Center, justifyContent : Center, size : { width : Points(700), height : Points(500) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(700, node.layout.size.width);
		Assert.equals(500, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(200, node0.layout.size.height);
		Assert.equals(250, node0.layout.location.x);
		Assert.equals(30, node0.layout.location.y);
		Assert.equals(200, node1.layout.size.width);
		Assert.equals(200, node1.layout.size.height);
		Assert.equals(200, node1.layout.location.x);
		Assert.equals(250, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(420, node2.layout.location.x);
		Assert.equals(200, node2.layout.location.y);
	}
	function test_wrapped_column_max_height_flex() {
		var node0 = new Node({ flexGrow : 1, flexShrink : 1, flexBasis : Percent(0), size : { width : Points(100), height : Points(500) }, maxSize : { width : Auto, height : Points(200) } }, []);
		var node1 = new Node({ flexGrow : 1, flexShrink : 1, flexBasis : Percent(0), size : { width : Points(200), height : Points(200) }, margin : { start : Points(20), end : Points(20), top : Points(20), bottom : Points(20) } }, []);
		var node2 = new Node({ size : { width : Points(100), height : Points(100) } }, []);
		var node = new Node({ flexDirection : Column, flexWrap : Wrap, alignItems : Center, alignContent : Center, justifyContent : Center, size : { width : Points(700), height : Points(500) } }, [node0, node1, node2]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(700, node.layout.size.width);
		Assert.equals(500, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(100, node0.layout.size.width);
		Assert.equals(180, node0.layout.size.height);
		Assert.equals(300, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(200, node1.layout.size.width);
		Assert.equals(180, node1.layout.size.height);
		Assert.equals(250, node1.layout.location.x);
		Assert.equals(200, node1.layout.location.y);
		Assert.equals(100, node2.layout.size.width);
		Assert.equals(100, node2.layout.size.height);
		Assert.equals(300, node2.layout.location.x);
		Assert.equals(400, node2.layout.location.y);
	}
	function test_wrapped_row_within_align_items_center() {
		var node00 = new Node({ size : { width : Points(150), height : Points(80) } }, []);
		var node01 = new Node({ size : { width : Points(80), height : Points(80) } }, []);
		var node0 = new Node({ flexWrap : Wrap }, [node00, node01]);
		var node = new Node({ flexDirection : Column, alignItems : Center, size : { width : Points(200), height : Points(200) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(200, node0.layout.size.width);
		Assert.equals(160, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(150, node00.layout.size.width);
		Assert.equals(80, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(80, node01.layout.size.width);
		Assert.equals(80, node01.layout.size.height);
		Assert.equals(0, node01.layout.location.x);
		Assert.equals(80, node01.layout.location.y);
	}
	function test_wrapped_row_within_align_items_flex_end() {
		var node00 = new Node({ size : { width : Points(150), height : Points(80) } }, []);
		var node01 = new Node({ size : { width : Points(80), height : Points(80) } }, []);
		var node0 = new Node({ flexWrap : Wrap }, [node00, node01]);
		var node = new Node({ flexDirection : Column, alignItems : FlexEnd, size : { width : Points(200), height : Points(200) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(200, node0.layout.size.width);
		Assert.equals(160, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(150, node00.layout.size.width);
		Assert.equals(80, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(80, node01.layout.size.width);
		Assert.equals(80, node01.layout.size.height);
		Assert.equals(0, node01.layout.location.x);
		Assert.equals(80, node01.layout.location.y);
	}
	function test_wrapped_row_within_align_items_flex_start() {
		var node00 = new Node({ size : { width : Points(150), height : Points(80) } }, []);
		var node01 = new Node({ size : { width : Points(80), height : Points(80) } }, []);
		var node0 = new Node({ flexWrap : Wrap }, [node00, node01]);
		var node = new Node({ flexDirection : Column, alignItems : FlexStart, size : { width : Points(200), height : Points(200) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(200, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(200, node0.layout.size.width);
		Assert.equals(160, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(150, node00.layout.size.width);
		Assert.equals(80, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(80, node01.layout.size.width);
		Assert.equals(80, node01.layout.size.height);
		Assert.equals(0, node01.layout.location.x);
		Assert.equals(80, node01.layout.location.y);
	}
	function test_wrap_column() {
		var node0 = new Node({ size : { width : Points(30), height : Points(31) } }, []);
		var node1 = new Node({ size : { width : Points(30), height : Points(32) } }, []);
		var node2 = new Node({ size : { width : Points(30), height : Points(33) } }, []);
		var node3 = new Node({ size : { width : Points(30), height : Points(34) } }, []);
		var node = new Node({ flexDirection : Column, flexWrap : Wrap, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2, node3]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(30, node0.layout.size.width);
		Assert.equals(31, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(30, node1.layout.size.width);
		Assert.equals(32, node1.layout.size.height);
		Assert.equals(0, node1.layout.location.x);
		Assert.equals(31, node1.layout.location.y);
		Assert.equals(30, node2.layout.size.width);
		Assert.equals(33, node2.layout.size.height);
		Assert.equals(0, node2.layout.location.x);
		Assert.equals(63, node2.layout.location.y);
		Assert.equals(30, node3.layout.size.width);
		Assert.equals(34, node3.layout.size.height);
		Assert.equals(50, node3.layout.location.x);
		Assert.equals(0, node3.layout.location.y);
	}
	function test_wrap_nodes_with_content_sizing_margin_cross() {
		var node000 = new Node({ size : { width : Points(40), height : Points(40) } }, []);
		var node00 = new Node({ flexDirection : Column }, [node000]);
		var node010 = new Node({ size : { width : Points(40), height : Points(40) } }, []);
		var node01 = new Node({ flexDirection : Column, margin : { start : Auto, end : Auto, top : Points(10), bottom : Auto } }, [node010]);
		var node0 = new Node({ flexWrap : Wrap, size : { width : Points(70), height : Auto } }, [node00, node01]);
		var node = new Node({ flexDirection : Column, size : { width : Points(500), height : Points(500) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(500, node.layout.size.width);
		Assert.equals(500, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(70, node0.layout.size.width);
		Assert.equals(90, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(40, node00.layout.size.width);
		Assert.equals(40, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(40, node000.layout.size.width);
		Assert.equals(40, node000.layout.size.height);
		Assert.equals(0, node000.layout.location.x);
		Assert.equals(0, node000.layout.location.y);
		Assert.equals(40, node01.layout.size.width);
		Assert.equals(40, node01.layout.size.height);
		Assert.equals(0, node01.layout.location.x);
		Assert.equals(50, node01.layout.location.y);
		Assert.equals(40, node010.layout.size.width);
		Assert.equals(40, node010.layout.size.height);
		Assert.equals(0, node010.layout.location.x);
		Assert.equals(0, node010.layout.location.y);
	}
	function test_wrap_nodes_with_content_sizing_overflowing_margin() {
		var node000 = new Node({ size : { width : Points(40), height : Points(40) } }, []);
		var node00 = new Node({ flexDirection : Column }, [node000]);
		var node010 = new Node({ size : { width : Points(40), height : Points(40) } }, []);
		var node01 = new Node({ flexDirection : Column, margin : { start : Auto, end : Points(10), top : Auto, bottom : Auto } }, [node010]);
		var node0 = new Node({ flexWrap : Wrap, size : { width : Points(85), height : Auto } }, [node00, node01]);
		var node = new Node({ flexDirection : Column, size : { width : Points(500), height : Points(500) } }, [node0]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(500, node.layout.size.width);
		Assert.equals(500, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(85, node0.layout.size.width);
		Assert.equals(80, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(40, node00.layout.size.width);
		Assert.equals(40, node00.layout.size.height);
		Assert.equals(0, node00.layout.location.x);
		Assert.equals(0, node00.layout.location.y);
		Assert.equals(40, node000.layout.size.width);
		Assert.equals(40, node000.layout.size.height);
		Assert.equals(0, node000.layout.location.x);
		Assert.equals(0, node000.layout.location.y);
		Assert.equals(40, node01.layout.size.width);
		Assert.equals(40, node01.layout.size.height);
		Assert.equals(0, node01.layout.location.x);
		Assert.equals(40, node01.layout.location.y);
		Assert.equals(40, node010.layout.size.width);
		Assert.equals(40, node010.layout.size.height);
		Assert.equals(0, node010.layout.location.x);
		Assert.equals(0, node010.layout.location.y);
	}
	function test_wrap_reverse_column() {
		var node0 = new Node({ size : { width : Points(30), height : Points(31) } }, []);
		var node1 = new Node({ size : { width : Points(30), height : Points(32) } }, []);
		var node2 = new Node({ size : { width : Points(30), height : Points(33) } }, []);
		var node3 = new Node({ size : { width : Points(30), height : Points(34) } }, []);
		var node = new Node({ flexDirection : Column, flexWrap : WrapReverse, size : { width : Points(100), height : Points(100) } }, [node0, node1, node2, node3]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(30, node0.layout.size.width);
		Assert.equals(31, node0.layout.size.height);
		Assert.equals(70, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(30, node1.layout.size.width);
		Assert.equals(32, node1.layout.size.height);
		Assert.equals(70, node1.layout.location.x);
		Assert.equals(31, node1.layout.location.y);
		Assert.equals(30, node2.layout.size.width);
		Assert.equals(33, node2.layout.size.height);
		Assert.equals(70, node2.layout.location.x);
		Assert.equals(63, node2.layout.location.y);
		Assert.equals(30, node3.layout.size.width);
		Assert.equals(34, node3.layout.size.height);
		Assert.equals(20, node3.layout.location.x);
		Assert.equals(0, node3.layout.location.y);
	}
	function test_wrap_reverse_column_fixed_size() {
		var node0 = new Node({ size : { width : Points(30), height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Points(30), height : Points(20) } }, []);
		var node2 = new Node({ size : { width : Points(30), height : Points(30) } }, []);
		var node3 = new Node({ size : { width : Points(30), height : Points(40) } }, []);
		var node4 = new Node({ size : { width : Points(30), height : Points(50) } }, []);
		var node = new Node({ flexDirection : Column, flexWrap : WrapReverse, alignItems : Center, size : { width : Points(200), height : Points(100) } }, [node0, node1, node2, node3, node4]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(200, node.layout.size.width);
		Assert.equals(100, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(30, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(135, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(30, node1.layout.size.width);
		Assert.equals(20, node1.layout.size.height);
		Assert.equals(135, node1.layout.location.x);
		Assert.equals(10, node1.layout.location.y);
		Assert.equals(30, node2.layout.size.width);
		Assert.equals(30, node2.layout.size.height);
		Assert.equals(135, node2.layout.location.x);
		Assert.equals(30, node2.layout.location.y);
		Assert.equals(30, node3.layout.size.width);
		Assert.equals(40, node3.layout.size.height);
		Assert.equals(135, node3.layout.location.x);
		Assert.equals(60, node3.layout.location.y);
		Assert.equals(30, node4.layout.size.width);
		Assert.equals(50, node4.layout.size.height);
		Assert.equals(35, node4.layout.location.x);
		Assert.equals(0, node4.layout.location.y);
	}
	function test_wrap_reverse_row() {
		var node0 = new Node({ size : { width : Points(31), height : Points(30) } }, []);
		var node1 = new Node({ size : { width : Points(32), height : Points(30) } }, []);
		var node2 = new Node({ size : { width : Points(33), height : Points(30) } }, []);
		var node3 = new Node({ size : { width : Points(34), height : Points(30) } }, []);
		var node = new Node({ flexWrap : WrapReverse, size : { width : Points(100), height : Auto } }, [node0, node1, node2, node3]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(60, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(31, node0.layout.size.width);
		Assert.equals(30, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(30, node0.layout.location.y);
		Assert.equals(32, node1.layout.size.width);
		Assert.equals(30, node1.layout.size.height);
		Assert.equals(31, node1.layout.location.x);
		Assert.equals(30, node1.layout.location.y);
		Assert.equals(33, node2.layout.size.width);
		Assert.equals(30, node2.layout.size.height);
		Assert.equals(63, node2.layout.location.x);
		Assert.equals(30, node2.layout.location.y);
		Assert.equals(34, node3.layout.size.width);
		Assert.equals(30, node3.layout.size.height);
		Assert.equals(0, node3.layout.location.x);
		Assert.equals(0, node3.layout.location.y);
	}
	function test_wrap_reverse_row_align_content_center() {
		var node0 = new Node({ size : { width : Points(30), height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Points(30), height : Points(20) } }, []);
		var node2 = new Node({ size : { width : Points(30), height : Points(30) } }, []);
		var node3 = new Node({ size : { width : Points(30), height : Points(40) } }, []);
		var node4 = new Node({ size : { width : Points(30), height : Points(50) } }, []);
		var node = new Node({ flexWrap : WrapReverse, alignContent : Center, size : { width : Points(100), height : Auto } }, [node0, node1, node2, node3, node4]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(80, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(30, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(70, node0.layout.location.y);
		Assert.equals(30, node1.layout.size.width);
		Assert.equals(20, node1.layout.size.height);
		Assert.equals(30, node1.layout.location.x);
		Assert.equals(60, node1.layout.location.y);
		Assert.equals(30, node2.layout.size.width);
		Assert.equals(30, node2.layout.size.height);
		Assert.equals(60, node2.layout.location.x);
		Assert.equals(50, node2.layout.location.y);
		Assert.equals(30, node3.layout.size.width);
		Assert.equals(40, node3.layout.size.height);
		Assert.equals(0, node3.layout.location.x);
		Assert.equals(10, node3.layout.location.y);
		Assert.equals(30, node4.layout.size.width);
		Assert.equals(50, node4.layout.size.height);
		Assert.equals(30, node4.layout.location.x);
		Assert.equals(0, node4.layout.location.y);
	}
	function test_wrap_reverse_row_align_content_flex_start() {
		var node0 = new Node({ size : { width : Points(30), height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Points(30), height : Points(20) } }, []);
		var node2 = new Node({ size : { width : Points(30), height : Points(30) } }, []);
		var node3 = new Node({ size : { width : Points(30), height : Points(40) } }, []);
		var node4 = new Node({ size : { width : Points(30), height : Points(50) } }, []);
		var node = new Node({ flexWrap : WrapReverse, alignContent : FlexStart, size : { width : Points(100), height : Auto } }, [node0, node1, node2, node3, node4]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(80, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(30, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(70, node0.layout.location.y);
		Assert.equals(30, node1.layout.size.width);
		Assert.equals(20, node1.layout.size.height);
		Assert.equals(30, node1.layout.location.x);
		Assert.equals(60, node1.layout.location.y);
		Assert.equals(30, node2.layout.size.width);
		Assert.equals(30, node2.layout.size.height);
		Assert.equals(60, node2.layout.location.x);
		Assert.equals(50, node2.layout.location.y);
		Assert.equals(30, node3.layout.size.width);
		Assert.equals(40, node3.layout.size.height);
		Assert.equals(0, node3.layout.location.x);
		Assert.equals(10, node3.layout.location.y);
		Assert.equals(30, node4.layout.size.width);
		Assert.equals(50, node4.layout.size.height);
		Assert.equals(30, node4.layout.location.x);
		Assert.equals(0, node4.layout.location.y);
	}
	function test_wrap_reverse_row_align_content_space_around() {
		var node0 = new Node({ size : { width : Points(30), height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Points(30), height : Points(20) } }, []);
		var node2 = new Node({ size : { width : Points(30), height : Points(30) } }, []);
		var node3 = new Node({ size : { width : Points(30), height : Points(40) } }, []);
		var node4 = new Node({ size : { width : Points(30), height : Points(50) } }, []);
		var node = new Node({ flexWrap : WrapReverse, alignContent : SpaceAround, size : { width : Points(100), height : Auto } }, [node0, node1, node2, node3, node4]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(80, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(30, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(70, node0.layout.location.y);
		Assert.equals(30, node1.layout.size.width);
		Assert.equals(20, node1.layout.size.height);
		Assert.equals(30, node1.layout.location.x);
		Assert.equals(60, node1.layout.location.y);
		Assert.equals(30, node2.layout.size.width);
		Assert.equals(30, node2.layout.size.height);
		Assert.equals(60, node2.layout.location.x);
		Assert.equals(50, node2.layout.location.y);
		Assert.equals(30, node3.layout.size.width);
		Assert.equals(40, node3.layout.size.height);
		Assert.equals(0, node3.layout.location.x);
		Assert.equals(10, node3.layout.location.y);
		Assert.equals(30, node4.layout.size.width);
		Assert.equals(50, node4.layout.size.height);
		Assert.equals(30, node4.layout.location.x);
		Assert.equals(0, node4.layout.location.y);
	}
	function test_wrap_reverse_row_align_content_stretch() {
		var node0 = new Node({ size : { width : Points(30), height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Points(30), height : Points(20) } }, []);
		var node2 = new Node({ size : { width : Points(30), height : Points(30) } }, []);
		var node3 = new Node({ size : { width : Points(30), height : Points(40) } }, []);
		var node4 = new Node({ size : { width : Points(30), height : Points(50) } }, []);
		var node = new Node({ flexWrap : WrapReverse, size : { width : Points(100), height : Auto } }, [node0, node1, node2, node3, node4]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(80, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(30, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(70, node0.layout.location.y);
		Assert.equals(30, node1.layout.size.width);
		Assert.equals(20, node1.layout.size.height);
		Assert.equals(30, node1.layout.location.x);
		Assert.equals(60, node1.layout.location.y);
		Assert.equals(30, node2.layout.size.width);
		Assert.equals(30, node2.layout.size.height);
		Assert.equals(60, node2.layout.location.x);
		Assert.equals(50, node2.layout.location.y);
		Assert.equals(30, node3.layout.size.width);
		Assert.equals(40, node3.layout.size.height);
		Assert.equals(0, node3.layout.location.x);
		Assert.equals(10, node3.layout.location.y);
		Assert.equals(30, node4.layout.size.width);
		Assert.equals(50, node4.layout.size.height);
		Assert.equals(30, node4.layout.location.x);
		Assert.equals(0, node4.layout.location.y);
	}
	function test_wrap_reverse_row_single_line_different_size() {
		var node0 = new Node({ size : { width : Points(30), height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Points(30), height : Points(20) } }, []);
		var node2 = new Node({ size : { width : Points(30), height : Points(30) } }, []);
		var node3 = new Node({ size : { width : Points(30), height : Points(40) } }, []);
		var node4 = new Node({ size : { width : Points(30), height : Points(50) } }, []);
		var node = new Node({ flexWrap : WrapReverse, alignContent : FlexStart, size : { width : Points(300), height : Auto } }, [node0, node1, node2, node3, node4]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(300, node.layout.size.width);
		Assert.equals(50, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(30, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(40, node0.layout.location.y);
		Assert.equals(30, node1.layout.size.width);
		Assert.equals(20, node1.layout.size.height);
		Assert.equals(30, node1.layout.location.x);
		Assert.equals(30, node1.layout.location.y);
		Assert.equals(30, node2.layout.size.width);
		Assert.equals(30, node2.layout.size.height);
		Assert.equals(60, node2.layout.location.x);
		Assert.equals(20, node2.layout.location.y);
		Assert.equals(30, node3.layout.size.width);
		Assert.equals(40, node3.layout.size.height);
		Assert.equals(90, node3.layout.location.x);
		Assert.equals(10, node3.layout.location.y);
		Assert.equals(30, node4.layout.size.width);
		Assert.equals(50, node4.layout.size.height);
		Assert.equals(120, node4.layout.location.x);
		Assert.equals(0, node4.layout.location.y);
	}
	function test_wrap_row() {
		var node0 = new Node({ size : { width : Points(31), height : Points(30) } }, []);
		var node1 = new Node({ size : { width : Points(32), height : Points(30) } }, []);
		var node2 = new Node({ size : { width : Points(33), height : Points(30) } }, []);
		var node3 = new Node({ size : { width : Points(34), height : Points(30) } }, []);
		var node = new Node({ flexWrap : Wrap, size : { width : Points(100), height : Auto } }, [node0, node1, node2, node3]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(60, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(31, node0.layout.size.width);
		Assert.equals(30, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(0, node0.layout.location.y);
		Assert.equals(32, node1.layout.size.width);
		Assert.equals(30, node1.layout.size.height);
		Assert.equals(31, node1.layout.location.x);
		Assert.equals(0, node1.layout.location.y);
		Assert.equals(33, node2.layout.size.width);
		Assert.equals(30, node2.layout.size.height);
		Assert.equals(63, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
		Assert.equals(34, node3.layout.size.width);
		Assert.equals(30, node3.layout.size.height);
		Assert.equals(0, node3.layout.location.x);
		Assert.equals(30, node3.layout.location.y);
	}
	function test_wrap_row_align_items_center() {
		var node0 = new Node({ size : { width : Points(30), height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Points(30), height : Points(20) } }, []);
		var node2 = new Node({ size : { width : Points(30), height : Points(30) } }, []);
		var node3 = new Node({ size : { width : Points(30), height : Points(30) } }, []);
		var node = new Node({ flexWrap : Wrap, alignItems : Center, size : { width : Points(100), height : Auto } }, [node0, node1, node2, node3]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(60, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(30, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(10, node0.layout.location.y);
		Assert.equals(30, node1.layout.size.width);
		Assert.equals(20, node1.layout.size.height);
		Assert.equals(30, node1.layout.location.x);
		Assert.equals(5, node1.layout.location.y);
		Assert.equals(30, node2.layout.size.width);
		Assert.equals(30, node2.layout.size.height);
		Assert.equals(60, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
		Assert.equals(30, node3.layout.size.width);
		Assert.equals(30, node3.layout.size.height);
		Assert.equals(0, node3.layout.location.x);
		Assert.equals(30, node3.layout.location.y);
	}
	function test_wrap_row_align_items_flex_end() {
		var node0 = new Node({ size : { width : Points(30), height : Points(10) } }, []);
		var node1 = new Node({ size : { width : Points(30), height : Points(20) } }, []);
		var node2 = new Node({ size : { width : Points(30), height : Points(30) } }, []);
		var node3 = new Node({ size : { width : Points(30), height : Points(30) } }, []);
		var node = new Node({ flexWrap : Wrap, alignItems : FlexEnd, size : { width : Points(100), height : Auto } }, [node0, node1, node2, node3]);
		Stretch.computeLayout(node, Size.undefined());
		Assert.equals(100, node.layout.size.width);
		Assert.equals(60, node.layout.size.height);
		Assert.equals(0, node.layout.location.x);
		Assert.equals(0, node.layout.location.y);
		Assert.equals(30, node0.layout.size.width);
		Assert.equals(10, node0.layout.size.height);
		Assert.equals(0, node0.layout.location.x);
		Assert.equals(20, node0.layout.location.y);
		Assert.equals(30, node1.layout.size.width);
		Assert.equals(20, node1.layout.size.height);
		Assert.equals(30, node1.layout.location.x);
		Assert.equals(10, node1.layout.location.y);
		Assert.equals(30, node2.layout.size.width);
		Assert.equals(30, node2.layout.size.height);
		Assert.equals(60, node2.layout.location.x);
		Assert.equals(0, node2.layout.location.y);
		Assert.equals(30, node3.layout.size.width);
		Assert.equals(30, node3.layout.size.height);
		Assert.equals(0, node3.layout.location.x);
		Assert.equals(30, node3.layout.location.y);
	}
}